
protocol Networkable {
    
    func fetchHomePage(completion: @escaping (Result<MainCatalogShowModel, Error>) -> ())
    func fetchNews(completion: @escaping (Result<NewsModel, Error>) -> ())
    func fetchItemNews(completion: @escaping (Result<NewsItemNewsModel, Error>) -> (), productIdItem: Int)
    func fetchCategoryItems(completion: @escaping (Result<ViewAllCategoryItem, Error>) -> (), productSection: Int, page: Int, orderBy: String) 
    func addItemComment(completion: @escaping (Result<AddComment, Error>) -> (), productId: Int, firstName: String, body: String)
    func fetchCategoryPage(completion: @escaping (Result<CategoryModel, Error>) -> ())
    func fetchProductItem(completion: @escaping (Result<CategoryProductItem, Error>) -> (), productIndex: Int)
    func loginPhone(completion: @escaping (Result<LoginResponse, Error>) -> (), phone: Int)
    func logout(completion: @escaping (Result<DefaultResponse, Error>) -> ())
    func addToCard(completion: @escaping (Result<CardCheckoutItemCard, Error>) -> (), productId: Int)
    func verifyPhone(completion: @escaping (Result<LoginVerifyModel, Error>) -> (), phone: Int, verifyCode: Int)
    func fetchUserInfo(completion: @escaping (Result<ProfileUser, Error>) -> ())
    func fetchFavouriteItems(completion: @escaping (Result<FavoritesUserFavourites, Error>) -> (), page: Int)
    func fetchUserAddresses(completion: @escaping (Result<AddressModel, Error>) -> (), page: Int)
    func checkoutProcess(completion: @escaping (Result<CheckoutModel, Error>) -> (), paymentType:String, addressName:String, addressMain: String, addressCity:String, addressRegion:String, phone:String, locationLat:String, locationLang:String, data: [String : String])
    func checkoutProcessWithAddress(completion: @escaping (Result<CheckoutModel, Error>) -> (), paymentType:String, addressId:Int, data: [String : String])
    func addNewAddress(completion: @escaping (Result<AddAdress, Error>) -> (), name: String, address: String, city: String, region: String, locationLat: String, locationLang: String, phone: String)
    func profileUpdate(completion: @escaping (Result<ProfileUser, Error>) -> (), firstName: String, secondName: String, birthDate: String, gender: Int)
    func updateAddress(completion: @escaping (Result<EditAddress, Error>) -> (), addressId: Int, name: String, address: String, city: String, region: String, locationLat: String, locationLang: String, phone: String)
    func deleteAddressInfo(completion: @escaping (Result<DefaultResponse, Error>) -> (), addressId: Int)
    func getAddressInfo(completion: @escaping (Result<EditAddress, Error>) -> (), addressId: Int)
    func getUserOrders(completion: @escaping (Result<OrdersModel, Error>) -> (), type: String, page: Int)
    func getOrderItem(completion: @escaping (Result<OrdersDetail, Error>) -> (), orderID : Int)
    func cancelOrder(completion: @escaping (Result<DefaultResponse, Error>) -> (), productId: Int)
    func searchItems(completion: @escaping (Result<SearchResultsModel, Error>) -> (), query: String, page: Int, orderBy: String)
}
